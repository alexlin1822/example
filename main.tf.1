# Define the required provider(s)
provider "aws" {
  region = "us-east-1"
}

# Define the S3 bucket for storing the files
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-bucket"
  acl    = "private"
}

# Define the Lambda function
resource "aws_lambda_function" "my_lambda" {
  function_name    = "my-lambda-function"
  role             = aws_iam_role.my_role.arn
  handler          = "index.handler"
  runtime          = "nodejs14.x"
  filename         = "lambda.zip"
  source_code_hash = filebase64sha256("lambda.zip")
}

# Define the IAM role for the Lambda function
resource "aws_iam_role" "my_role" {
  name = "my-lambda-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

# Define the IAM policy for the Lambda function
resource "aws_iam_policy" "my_policy" {
  name        = "my-lambda-policy"
  description = "Policy for accessing S3 and Artifactory"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
        "${aws_s3_bucket.my_bucket.arn}/*"
      ]
    }
  ]
}
EOF
}

# Attach the IAM policy to the IAM role
resource "aws_iam_role_policy_attachment" "my_attachment" {
  role       = aws_iam_role.my_role.name
  policy_arn = aws_iam_policy.my_policy.arn
}

# Define the local-exec provisioner to execute shell commands
resource "null_resource" "my_provisioner" {
  provisioner "local-exec" {
    command = <<EOF
wget -O artifact.tgz "https://my-artifactory-url/artifacts/my-tgz-file.tgz"
tar -xzf artifact.tgz file1.txt file2.txt
zip -r lambda.zip file1.txt file2.txt
EOF
  }
  depends_on = [aws_s3_bucket.my_bucket]
}

# Upload the Lambda function package to S3
resource "aws_s3_bucket_object" "my_lambda_zip" {
  bucket = aws_s3_bucket.my_bucket.id
  key    = "lambda.zip"
  source = "${path.module}/lambda.zip"
  etag   = filemd5("${path.module}/lambda.zip")
  depends_on = [null_resource.my_provisioner]
}
